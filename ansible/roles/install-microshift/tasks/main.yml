---
# install-microshift tasks

- name: record initial disk space
  vars:
    filename: disk0.txt
  include_tasks: disk.yml
  loop: "{{ du_dirs }}"

- name: build & install microshift RPMs on RHEL
  block:
    - name: install cri-o
      become: yes
      ansible.builtin.dnf:
        name:
          - cri-o
          - cri-tools
        state: present

    - name: start & enable crio service
      become: yes
      ansible.builtin.systemd:
        name: crio
        state: started
        enabled: yes

    - name: check if microshift dir exists
      ansible.builtin.stat:
        path: "{{ microshift_dir }}"
      register: ms_dir

    - name: clone microshift git repo
      ansible.builtin.git:
        repo: "{{ microshift_repo }}"
        dest: "{{ microshift_dir }}"
      when: not ms_dir.stat.exists

    - name: make clean
      ansible.builtin.command: make clean
      args:
        chdir: "{{ microshift_dir }}"

    - name: make rpm
      ansible.builtin.command: make rpm
      args:
        chdir: "{{ microshift_dir }}"

    - name: find built RPMs
      ansible.builtin.find:
        paths: "{{ microshift_dir }}"
        patterns: '*.rpm'
        recurse: yes
      register: microshift_find

    - name: make list of built RPM paths
      ansible.builtin.set_fact:
        microshift_rpms: "{{ microshift_rpms + [ item.path ] }}"
      with_items: "{{ microshift_find.files }}"

    - name: install microshift RPMs
      become: yes
      ansible.builtin.dnf:
        name: "{{ microshift_rpms }}"
        state: present
        disable_gpg_check: yes
  when: ansible_distribution == "RedHat"

- name: install microshift RPMs on CentOS
  become: yes
  block:
    - name: enable microshift copr repo
      community.general.copr:
        name: '@redhat-et/microshift'
        state: enabled

    - name: enable cri-o module
      ansible.builtin.command: dnf module enable -y cri-o

    - name: install microshift package
      ansible.builtin.dnf:
        name: microshift
        state: present
        update_cache: true
  when: ansible_distribution == "CentOS"

- name: build & install etcd
  block:
    - name: clone etcd git repo
      ansible.builtin.git:
        repo: "{{ etcd_repo }}"
        dest: "{{ etcd_dir }}"

    - name: make etcd binary
      ansible.builtin.command: make
      args:
        chdir: "{{ etcd_dir }}"

    - name: install etcd binary
      become: yes
      ansible.builtin.copy:
        src: "{{ etcd_dir }}/bin/etcd"
        dest: "/usr/bin/etcd"
        remote_src: yes
        mode: '0755'

    - name: copy etcd systemd unit to node
      become: yes
      ansible.builtin.copy:
        src: etcd.service
        dest: /usr/lib/systemd/system/etcd.service
        owner: root
        group: root
        mode: '0664'

    - name: start etcd service
      become: yes
      ansible.builtin.systemd:
        daemon_reload: yes
        state: started
        name: etcd
  when: build_etcd_binary | bool

- name: check if pull-secret is present
  ansible.builtin.stat:
    path: /etc/crio/openshift-pull-secret
  register: pull_secret

- name: copy pull-secret to node
  become: yes
  ansible.builtin.copy:
    src: pull-secret.txt
    dest: /etc/crio/openshift-pull-secret
    owner: root
    group: root
    mode: '0600'
  when: not pull_secret.stat.exists

- name: create .kube home dir
  ansible.builtin.file:
    path: ~/.kube/
    state: directory

- name: pbench recording start
  become: yes
  block:
  - name: source pbench-agent & register-tool-set
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-register-tool-set
  
  - name: set new pidstat interval
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-register-tool --name=pidstat -- --interval={{ sample_interval }}

  - name: start pbench-user-benchmark recording
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-user-benchmark --config=microshift -- sleep {{ pbench_record_duration }}
    async: "{{ pbench_record_duration|int * 2 }}"
    poll: 0
    register: pbench_user_benchmark_result
  
  - name: Pause for 60 seconds to gather steady state for pbench tool recording
    ansible.builtin.pause:
      seconds: 60
  when: install_pbench | bool
  environment:
    PBENCH_TOOL_DATA_SINK: localhost:8081

- name: record post-install disk utilization
  vars:
    filename: disk1.txt
  include_tasks: disk.yml
  loop: "{{ du_dirs }}"

- name: force update of current timestamp
  ansible.builtin.setup:
    filter:
      - 'ansible_date_time'

- name: set start_time
  ansible.builtin.set_fact:
    start_time: "{{ ansible_date_time.iso8601[:19] }}"

- name: start microshift service
  become: yes
  ansible.builtin.systemd:
    name: microshift
    state: started
    enabled: no

- name: check for cadvisor
  ansible.builtin.command: which cadvisor
  register: cadvisor_check
  ignore_errors: true

- name: restart cadvisor to pick up new containers
  become: yes
  ansible.builtin.systemd:
    name: cadvisor
    state: restarted
  when: cadvisor_check.rc == 0

- name: wait for kubeconfig to exist on microshift node
  become: yes
  ansible.builtin.stat:
    path: "{{ remote_kubeconfig_path }}"
  register: remote_kubeconfig
  until: remote_kubeconfig.stat.exists
  retries: 30
  delay: 10

- name: create copy of kubeconfig
  become: yes
  ansible.builtin.copy:
    src: "{{ remote_kubeconfig_path }}"
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    remote_src: yes
    force: yes

- include_tasks: roles/common/tasks/readinesscheck.yml

- name: force update of current timestamp
  ansible.builtin.setup:
    filter:
      - 'ansible_date_time'

- name: get runtime
  ansible.builtin.set_fact:
    runtime: "{{ ((ansible_date_time.iso8601[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')) - (start_time | to_datetime('%Y-%m-%dT%H:%M:%S'))).seconds }}"

- name: Add boot info to local file
  lineinfile:
    path: boot.txt
    line: "First boot: {{ runtime }}"
    create: yes
  delegate_to: localhost

- name: finish pbench capture
  become: yes
  block:
  - name: check on pbench-user-benchmark status
    ansible.builtin.async_status:
      jid: "{{ pbench_user_benchmark_result.ansible_job_id }}"
    register: job_result
    until: job_result.finished
    retries: 240
    delay: 15
  
  - name: source pbench-agent & move results
    ansible.builtin.shell: source /etc/profile.d/pbench-agent.sh && pbench-move-results
  when: install_pbench | bool
  environment:
    PBENCH_USER: sejug

- name: record fully running disk utilization
  vars:
    filename: disk2.txt
  include_tasks: disk.yml
  loop: "{{ du_dirs }}"

- name: cleanup microshift data
  ansible.builtin.shell: echo 1 | /usr/bin/cleanup-all-microshift-data
  when: cleanup_microshift | default('true') | bool
