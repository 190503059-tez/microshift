commit fe83c426c9705b234ac546d168fb6c5d8c34a03d
Author: rootfs <hchen@redhat.com>
Date:   Fri Apr 30 10:54:29 2021 -0400

    hack: change openshift-apiserver and controller-manager. They use k8s.io/apiserver while openshift/kubernetes uses staging/src/k8s.io/apiserver. Some differences exist and cannot be reconciled

diff --git a/vendor/github.com/openshift/openshift-apiserver/pkg/cmd/openshift-apiserver/openshiftapiserver/openshift_apiserver.go b/vendor/github.com/openshift/openshift-apiserver/pkg/cmd/openshift-apiserver/openshiftapiserver/openshift_apiserver.go
index ba4a5e52..1925e2cc 100644
--- a/vendor/github.com/openshift/openshift-apiserver/pkg/cmd/openshift-apiserver/openshiftapiserver/openshift_apiserver.go
+++ b/vendor/github.com/openshift/openshift-apiserver/pkg/cmd/openshift-apiserver/openshiftapiserver/openshift_apiserver.go
@@ -350,7 +350,7 @@ func (c *completedConfig) WithOpenAPIAggregationController(delegatedAPIServer *g
 	// no openapi config previously set. An alternative to stripping this data away would be to create and append a new apiserver to the head
 	// of the delegation chain altogether, then pass that to the controller. But in the spirit of simplicity, we'll just strip default
 	// openapi fields that may have been previously set.
-	delegatedAPIServer.RemoveOpenAPIData()
+	//delegatedAPIServer.RemoveOpenAPIData()
 
 	specDownloader := aggregator.NewDownloader()
 	openAPIAggregator, err := aggregator.BuildAndRegisterAggregator(
diff --git a/vendor/github.com/openshift/openshift-controller-manager/pkg/cmd/controller/standalone_apiserver.go b/vendor/github.com/openshift/openshift-controller-manager/pkg/cmd/controller/standalone_apiserver.go
index aef72b79..0e82c918 100644
--- a/vendor/github.com/openshift/openshift-controller-manager/pkg/cmd/controller/standalone_apiserver.go
+++ b/vendor/github.com/openshift/openshift-controller-manager/pkg/cmd/controller/standalone_apiserver.go
@@ -62,7 +62,7 @@ func RunControllerServer(servingInfo configv1.HTTPServingInfo, kubeExternal clie
 
 	//handler = apifilters.WithAuthentication(handler, authn, apifilters.Unauthorized(legacyscheme.Codecs, false), nil)
 	handler = apifilters.WithAuthentication(handler, authn, apifilters.Unauthorized(serializer.WithoutConversionCodecFactory{CodecFactory: legacyscheme.Codecs}), nil)
-	handler = apiserverfilters.WithPanicRecovery(handler, requestInfoResolver)
+	handler = apiserverfilters.WithPanicRecovery(handler, requestInfoResolver, nil)
 	handler = apifilters.WithRequestInfo(handler, requestInfoResolver)
 
 	return serveControllers(servingInfo, handler, clientCAs)
